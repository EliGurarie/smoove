% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sweepRACVM.R
\name{sweepRACVM}
\alias{sweepRACVM}
\alias{sweepRACVM.default}
\alias{sweepRACVM.data.frame}
\alias{sweepRACVM.ltraj}
\alias{sweepRACVM.Move}
\title{Sweep RACVM}
\usage{
sweepRACVM(Z, ...)

\method{sweepRACVM}{default}(Z, T, windowsize, windowstep, model = "UCVM",
  progress = TRUE, time.unit = "hours", ..., .parallel = FALSE)

\method{sweepRACVM}{data.frame}(Z, ...)

\method{sweepRACVM}{ltraj}(Z, ...)

\method{sweepRACVM}{Move}(Z, ...)
}
\arguments{
\item{Z}{location data.  Can be: a complex vector, a two-column matrix or data frame, an \code{\link{ltraj}} object from \code{adehabitatLT} or a \code{\link{move}} object from the \code{move} package.}

\item{...}{additional parameters to pass to the \code{\link{estimateRACVM}} function, notably the option "criterion" allows you to select models based on AIC or BIC (the former is more liberal with more complex models).}

\item{T}{time vector, ignored if \code{Z} is an ltraj or move}

\item{windowsize}{time window of analysis to scan, IMPORTANTLY: in units of time (T).}

\item{windowstep}{step (in time) by which the window advances.  The smaller the step, the slower but more thorough the estimation.}

\item{model}{model to fit for the change point sweep - typically the most complex model in the candidate model set.}

\item{progress}{whether or not to show a progress bar}

\item{time.unit}{of the windowsize AND the windowstep. The default is "hours" - can be any of "secs", "mins", "hours", "days", "weeks" (See \code{\link{difftime}}). Ignored if time is not POSIX.}

\item{.parallel}{if set TRUE, will use \code{\link{foreach}} to parallelize the optimization.  Requires establishing the}
}
\description{
Sets a window (a subset of movement data within specific time window), computes likelihoods for a set of candidate change points within the window, and steps the window forward, filling out a likelihood matrix.
}
\examples{
if(interactive()){
  # Three stage example (from vignette)
  require(smoove)
  require(plyr)
  require(magrittr)
  
  taus <- c(3, 3, 1)
  mus <- c(3, 0, 0)
  etas <- c(2, 1, 1)
  tmaxes <- c(40,60,100)
  
  Z.raw <- 0
  T.raw <- 0
  mycvm <- list()
  
  for(i in 1:length(taus)){
    if(i > 1)  v0 <- mycvm$V[length(mycvm)]  else v0 = mus[1]
    mycvm <- simulateRACVM(tau = taus[i], eta = etas[i], mu = mus[i], v0 = v0,
                           Tmax = tmaxes[i], dt = 0.01)
    Z.raw <- c(Z.raw, mycvm$Z + Z.raw[length(Z.raw)])
    T.raw <- c(T.raw, mycvm$T + T.raw[length(T.raw)])
  }
  
  multicvm <- data.frame(Z = Z.raw, T = T.raw)[sample(1:length(Z.raw), 400),] \%>\% 
    arrange(T)
  plot_track(multicvm$Z)
  
  # Perform sweep
  simSweep <- with(multicvm,
                   sweepRACVM(
                     Z = Z,
                     T = T,
                     windowsize = 80,
                     windowstep = 10,
                     model = "ACVM"
                   ))
  
  # Perform sweep in parallel (can greatly improve speed)
  require(doParallel)
  cl <- makeCluster(detectCores())
  registerDoParallel(cl)
  simSweep <- with(
    multicvm,
    sweepRACVM(
      Z = Z,
      T = T,
      windowsize = 80,
      windowstep = 5,
      model = "UCVM",
      .parallel = TRUE
    )
  )
  # plot result of window sweep
  plotWindowSweep(simSweep)
}
}
\seealso{
\code{\link{plotWindowSweep}}, \code{\link{estimateRACVM}}, \code{\link{testCP}}
}
